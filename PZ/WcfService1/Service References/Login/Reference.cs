//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Checkers.Login {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginResponse", Namespace="http://schemas.datacontract.org/2004/07/Checkers.Interfaces")]
    [System.SerializableAttribute()]
    public partial class LoginResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AuthorizedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Authorized {
            get {
                return this.AuthorizedField;
            }
            set {
                if ((this.AuthorizedField.Equals(value) != true)) {
                    this.AuthorizedField = value;
                    this.RaisePropertyChanged("Authorized");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Session {
            get {
                return this.SessionField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionField, value) != true)) {
                    this.SessionField = value;
                    this.RaisePropertyChanged("Session");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Login.ILogin")]
    public interface ILogin {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogin/session", ReplyAction="http://tempuri.org/ILogin/sessionResponse")]
        Checkers.Login.LoginResponse session([System.ServiceModel.MessageParameterAttribute(Name="session")] string session1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogin/session", ReplyAction="http://tempuri.org/ILogin/sessionResponse")]
        System.Threading.Tasks.Task<Checkers.Login.LoginResponse> sessionAsync(string session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogin/logIn", ReplyAction="http://tempuri.org/ILogin/logInResponse")]
        Checkers.Login.LoginResponse logIn([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogin/logIn", ReplyAction="http://tempuri.org/ILogin/logInResponse")]
        System.Threading.Tasks.Task<Checkers.Login.LoginResponse> logInAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogin/test2", ReplyAction="http://tempuri.org/ILogin/test2Response")]
        Checkers.Login.LoginResponse test2();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogin/test2", ReplyAction="http://tempuri.org/ILogin/test2Response")]
        System.Threading.Tasks.Task<Checkers.Login.LoginResponse> test2Async();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginChannel : Checkers.Login.ILogin, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginClient : System.ServiceModel.ClientBase<Checkers.Login.ILogin>, Checkers.Login.ILogin {
        
        public LoginClient() {
        }
        
        public LoginClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoginClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Checkers.Login.LoginResponse session(string session1) {
            return base.Channel.session(session1);
        }
        
        public System.Threading.Tasks.Task<Checkers.Login.LoginResponse> sessionAsync(string session) {
            return base.Channel.sessionAsync(session);
        }
        
        public Checkers.Login.LoginResponse logIn(string login1, string password) {
            return base.Channel.logIn(login1, password);
        }
        
        public System.Threading.Tasks.Task<Checkers.Login.LoginResponse> logInAsync(string login, string password) {
            return base.Channel.logInAsync(login, password);
        }
        
        public Checkers.Login.LoginResponse test2() {
            return base.Channel.test2();
        }
        
        public System.Threading.Tasks.Task<Checkers.Login.LoginResponse> test2Async() {
            return base.Channel.test2Async();
        }
    }
}
